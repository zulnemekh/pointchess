<html>
    <head>
        <title>MQTT over websockets</title>
        <style type="text/css">
            #status {
                padding: 5px;
                display: inline-block;
            }
            label, .label {
                display: inline-block;
                width: 100px;
            }
            li {
                list-style: none;

                background: #fff;
                margin: 2px;
            }
            ul {
                background: #eef;
            }
            .disconnected {
                background-color: #f88;
            }
            input {
                width: 400px;
            }
            .connected {
                background-color: #8f8;
            }

            #messagelist {
                width: 600px;
                height: 200px;
                overflow-y: scroll;
            }
        </style>
    </head>
    <body>
        <h1>Super simple chat</h1>
        <span class='label'>Status</span> <div id="status" class="disconnected">Pending</div>
        
            <label for="name">Name</label>
            <input id="name" name="name" type="text" width="40" value="anonymous"/> <br/>
            <label for="message">Message</label>
            <input id="message" name="message" type="text" width="200"/>
            

            <button id="btnFlip" name="computer" type="button" class="btn btn-primary">Send</button>
        

        <div id="messages"><ul id="messagelist">

        </ul></div>

    <script src="/assets/mqtt/amqttws31.js"></script>
    
    <script>
  var DEFAULT_TOPIC = "public";
        var messageService = {};

        var reconnectTimeout = 2000;
        var host = '54.250.120.152';   // hostname or IP address
        var port = 61614;
        var topic = DEFAULT_TOPIC;        // topic to subscribe to
        var nickname = 'guest'
        var useTLS = false;
        var username = null;
        var password = null;
        var cleansession = true;
/*
        var mqtt;
        var reconnectTimeout = 2000;
        var host=""
        var host = '192.168.100.215';   // hostname or IP address
        var port = 61614;
        var topic = 'public';        // topic to subscribe to
        var nickname = 'guest'
        var useTLS = false;
        var username = null;
        var password = null;
        var cleansession = true;
*/
        var mqtt = new Paho.MQTT.Client(
            host,
            port,
            "web_" + parseInt(Math.random() * 100,
                10));

        if(!mqtt.isConnected()){
            console.log("MQTT connecting");
            var options = {
                timeout: 3,
                useSSL: useTLS,
                cleanSession: cleansession,
                onSuccess: function () {
                    console.log('Connected to MQTT');
                },
                onFailure: function (message) {
                    console.log("Connection failed: " + message.errorMessage + "Retrying");
                    setTimeout(mqtt.connect(options), reconnectTimeout);
                }
            };
            mqtt.onMessageArrived = onMessageArrived;
            options.userName = '';
            options.password = '';
            mqtt.connect(options);
        }

		function onMessageArrived(message) {
				console.log("gggg");
		};

        messageService.sendDjMessage = function(cmd, media, duration) {//(cmd, media) {
            var duration = typeof duration !== 'undefined' ? duration : 0;
            var msgObj = {msgtype: 'ctrl', cmd: cmd,  duration: duration, media:media};
            var str = JSON.stringify(msgObj);
            mqtt.send(topic, str, 0, false);
        };

        messageService.sendRequestMessage = function() {
            var msgObj = {msgtype: 'rqst'};
            var str = JSON.stringify(msgObj);
            mqtt.send(topic, str, 0, false);
        };

        messageService.sendChatMessage = function(msg,handler) {
            // var userObj = cshellSharedService.getUser();
            // var msgObj = {msgtype:'text', username:userObj.nickname, message:msg};
            // var str = JSON.stringify(msgObj);
						// mqtt.onMessageArrived=handler;

            mqtt.subscribe("/World");
            message = new Paho.MQTT.Message(msg);
            message.destinationName = "/World";
            mqtt.send(message);
            // console.log("handler:"+mqtt.onMessageArrived);
        };

        messageService.sendRecordMessage = function(id) {
            console.log("sendRecordMessage" + id);
            var msgObj = {msgtype: 'record', id: id};
            var str = JSON.stringify(msgObj);
            mqtt.send(topic, str, 0, false);
        };


        messageService.joinRoom = function (channelId, handler) {

            //console.log("connected!!!= " + mqtt.isConnected());

            mqtt.onMessageArrived = handler;

            var tpc = "channel_"+channelId;
            if (false) 
            if(tpc != topic) {
                //var userObj = cshellSharedService.getUser();
                //messageService.sendChatMessage("leaving(changing) channel:"+topic);
                mqtt.unsubscribe(topic, null);
                dbSrvc.post("data/log", {channel_id: topic.substring(8), control_action: "leave"}).then(function() {
                });
                topic = tpc;
                mqtt.subscribe(tpc, {qos: 0});

                //messageService.sendChatMessage("joining channel:"+tpc);
                messageService.sendRequestMessage();

                dbSrvc.post("data/log", {channel_id: channelId, control_action: "join"}).then(function() {
                });
            }
        };

        messageService.leaveRoom = function (channelId) {

            //var userObj = cshellSharedService.getUser();
            var tpc = "channel_"+channelId;
            if(tpc == topic){
                //messageService.sendChatMessage(userObj.nickname + "leaving channel:"+topic);
                mqtt.unsubscribe(tpc, null);
                topic = DEFAULT_TOPIC;
                dbSrvc.post("data/log", {channel_id: channelId, control_action: "leave"}).then(function() {
                });
            }
        };

   		function onMessageArrived(message) {
   			console.log("gggg");
            $('#messagelist').prepend('<li>'+message.destinationName+ '->' +message.payloadString+'</li>');
            //var form = document.getElementById("example");
            //form.receiveMsg.value = message.payloadString;
        }

			listenerMessageHandler = function(mqttMsg){
			console.log("gggg");
			};

    $(document).ready(function() {
    	 

	 		$('#btnFlip').on('click', function() {          
            var messageinput = $('#message');
            // messageService.joinRoom('1', listenerMessageHandler);
            messageService.sendChatMessage(messageinput.val(),listenerMessageHandler);
        });

		});

    </script>
    </body>
</html>