<h1>Listing trains</h1>

<table>
  <thead>
    <tr>
      <th>Title</th>
      <th>Text data</th>
      <th>Pgn type</th>
      <th>Insert admin</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>

  <tbody>
    <% @trains.each do |train| %>
      <tr>
        <td><%= train.title %></td>
        <td><%= train.text_data %></td>
        <td><%= train.pgn_type %></td>
        <td><%= train.insert_admin %></td>
        <td><%= link_to 'Show', train %></td>
        <td><%= link_to 'Edit', edit_train_path(train) %></td>
        <td><%= link_to 'Destroy', train, method: :delete, data: { confirm: 'Are you sure?' } %></td>
      </tr>
    <% end %>
  </tbody>
</table>

<br>

<%= link_to 'New Train', new_train_path %>

<!-- test nemlee -->
 <link rel="stylesheet" href="/assets/css/chessboard-0.3.0.min.css" />
  <script src="/assets/js/chess.min.js"></script>
    
    <script src="/assets/js/chessboard-0.3.0.min.js"></script>
<div id="board" style="width: 400px"></div>
<script type="text/javascript">
    var board,
      game = new Chess();

    // do not pick up pieces if the game is over
    // only pick up pieces for White
    var onDragStart = function(source, piece, position, orientation) {
      if (game.in_checkmate() === true || game.in_draw() === true ||
        piece.search(/^b/) !== -1) {
        return false;
      }
    };

    var makeRandomMove = function() {
      var possibleMoves = game.moves();

      // game over
      if (possibleMoves.length === 0) return;

      var randomIndex = Math.floor(Math.random() * possibleMoves.length);
      game.move(possibleMoves[randomIndex]);
      board.position(game.fen());
    };

    var onDrop = function(source, target) {
      // see if the move is legal
      var move = game.move({
        from: source,
        to: target,
        promotion: 'q' // NOTE: always promote to a queen for example simplicity
      });

      // illegal move
      if (move === null) return 'snapback';

      // make random legal move for black
      window.setTimeout(makeRandomMove, 250);
    };

    // update the board position after the piece snap
    // for castling, en passant, pawn promotion
    var onSnapEnd = function() {
      board.position(game.fen());
    };

    var cfg = {
      draggable: true,
      position: 'start',
      onDragStart: onDragStart,
      onDrop: onDrop,
      onSnapEnd: onSnapEnd
    };
    board = ChessBoard('board', cfg);
</script>